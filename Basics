A void method may terminate using an empty return statement (return;)

you coincidentally created a local variable which has the exact same name as the instance variable, in which case, "this" keyword helps you to distinguish local variable from the instance variable. So with the keyword "this," you're explicitly referring to the current instance rather than just any other local variable.

 Static describes variables and methods that do not belong to any particular instance, but are actually shared between all instances of that class. They belong to Class Context.If I write an instance method, I can see static variables, and I can invoke static methods. Any instance can observe shared static context. 
 The other way around, however, when I describe a static method-- inside a static method, I can certainly access static variables, sure, and invoke other static methods, of course. ***But what I can't do is I can't access an instance variable or an instance method. That simply will not compile.
 
Static initializer is triggered once when the class is loaded to memory. Just once, that's it. 

public Class Order {
  private static String organization;
  static {
    Order.organization = "M1";
    //or
    organization = "M1";
   }
}

The approach where a static method internally creates and returns an instance of a certain type-- we call this factory method. (not using the new keyword).

Immutable Object:
Once Created, State cannot be altered.
no setters. only getters. State is set using constructor or directly initializing the instance variable in the class.


