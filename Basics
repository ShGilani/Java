A void method may terminate using an empty return statement (return;)

you coincidentally created a local variable which has the exact same name as the instance variable, in which case, "this" keyword helps you to distinguish local variable from the instance variable. So with the keyword "this," you're explicitly referring to the current instance rather than just any other local variable.

 Static describes variables and methods that do not belong to any particular instance, but are actually shared between all instances of that class. They belong to Class Context.If I write an instance method, I can see static variables, and I can invoke static methods. Any instance can observe shared static context. 
 The other way around, however, when I describe a static method-- inside a static method, I can certainly access static variables, sure, and invoke other static methods, of course. ***But what I can't do is I can't access an instance variable or an instance method. That simply will not compile.
 
Static initializer is triggered once when the class is loaded to memory. Just once, that's it. 
public Class Order {
  private static String organization;
  static {
    Order.organization = "M1";
    //or
    organization = "M1";
   }
}

Instance Initializer is trigger when instance is created. Executed before the constructor.

	private String orderName = "QQQ";
	
 //Instance Initializer
	{
		orderName = "PQR";
	}

	public static void main(String[] args) {
		new Order().performOp();
		new Order().performOp();
	}

	public void performOp() {
		System.out.println("Order name is: " + orderName);
	}
 
 Output:
 PQR
 PQR

The approach where a static method internally creates and returns an instance of a certain type-- we call this factory method. (not using the new keyword).

Immutable Object: They are thread safe.
Once Created, State cannot be altered.
private instance variables initialized during declaration or set using constructor. no setters. only getters. 
We can also mark private instance variables as final. that way, compiler will not allow setter method.

Enums:
--------------------

enum Snacks{
	BURGER, SANDWHICH, FRANKIE;
}

public class Order {

	private Snacks orderName;
	
	Order(Snacks snack){
		orderName = snack;
	}
	
	public static void main(String[] args) {
		new Order(Snacks.BURGER).performOp();
	}

	public void performOp() {
		System.out.println("Order name is: " + orderName);
	}

Enum values are instances of Enum Type.

----------------------------
Java Memory: Stack has primitive values and references to Objects in heap.

Passing the parameter

It means copying stack values. If we pass Object as a param to a method, (We are basically copying the stack value to the parameter reference ie the Obj address )
Now, both the variables point to the same Object. Any changes to parma Object will change the main Object too.
These changes will not happen when param is a primitive. as for primitive, stack value will hold the value it self not the address pointing to heap.
---------------------
The == operator compares values in Stack.
== is true when both the primitive values are same.
== returns true when both the references refer to the same object.








